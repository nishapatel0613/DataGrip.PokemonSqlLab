--->>>Part 2: Simple Selects and Counts

Directions: Write a sql query or sql queries that can answer the following questions

1.What are all the types of pokemon that a pokemon can have?
SELECT * From Pokemon.types;

2.What is the name of the pokemon with id 45?
SELECT name FROM Pokemon.pokemons WHERE ID = 45;

3.How many pokemon are there?
SELECT COUNT(*) AS count FROM Pokemon.pokemons;

4.How many types are there?
SELECT COUNT(*) AS count FROM Pokemon.pokemons;

5.How many pokemon have a secondary type?
SELECT COUNT(*) AS secondary FROM Pokemon.pokemons;






--->>>Part 3: Joins and Groups

Directions: Write a sql query or sql queries that can answer the following questions

1.What is each pokemon's primary type?
SELECT primary_type FROM pokemons;

2.What is Rufflet's secondary type?
SELECT secondary_type pokemons where Name = 'Rufflet';

3.What are the names of the pokemon that belong to the trainer with trainerID 303?
SELECT name FROM trainers WHERE ID = 303;

4.How many pokemon have a secondary type Poison?
select count(*) AS count from pokemons join types on pokemons.secondary_type = types.id where types.name = 'Poison';

5.What are all the primary types and how many pokemon have that type?
select pokemons.primary_type, COUNT(types.id) as COUNT from pokemons join types on pokemons.primary_type = types.id group by primary_type;

6.How many pokemon at level 100 does each trainer with at least one level 100 pokemone have? (Hint: your query should not display a trainer
select count(*) AS count from pokemon_trainer where pokelevel = 100;

7.How many pokemon only belong to one trainer and no other?
select COUNT(*) AS count from trainers;





--->>>Part 4: Final Report
      Directions: Write a query that returns the following collumns:

     | Pokemon Name	    |  Trainer Name	  |	   Level       |Primary Type	    |Secondary Type     |
     |----------------------------------------------------------------------------------------------|
     | Pokemon's name	| Trainer's name  | Current Level   |Primary Type Name	|Secondary Type Name|
      Sort the data by finding out which trainer has the strongest pokemon so that this will act as a ranking of strongest to weakest trainer. You may interpret strongest in whatever way you want, but you will have to explain your decision.



SELECT p.name AS 'Pokemon Name', t1.name AS 'Primary Type' , t2.name AS 'Secondary Type', p_t.pokelevel AS 'Level', t.trainername AS 'Trainer Name'
from pokemons p
   LEFT JOIN pokemon_trainer p_t on  p.id = p_t.pokemon_id
   LEFT JOIN trainers t on p_t.trainerID = t.trainername
   LEFT JOIN types AS t1 on p.primary_type = t1.id
   LEFT JOIN types AS t2 on p.secondary_type = t2.id
   GROUP BY p.name, t.trainername, pokelevel, attack, spatk, speed, t1.name, t2.name
   ORDER BY AVG(attack + spatk + speed);




